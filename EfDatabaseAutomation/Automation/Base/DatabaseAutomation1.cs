

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "EfDatabaseAutomation\App.config"
//     Connection String Name: "DatabaseAutomation"
//     Connection String:      "Data Source=i7751-app127;Initial Catalog=Automation;Integrated Security=True;MultipleActiveResultSets=True"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Enterprise Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 10.50.6560.0

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace EfDatabaseAutomation.Automation.Base
{

    #region Unit of work

    public interface IAutomation : System.IDisposable
    {
        System.Data.Entity.DbSet<TaxJournal> TaxJournals { get; set; } // TaxJournal

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class Automation : System.Data.Entity.DbContext, IAutomation
    {
        public System.Data.Entity.DbSet<TaxJournal> TaxJournals { get; set; } // TaxJournal

        static Automation()
        {
            System.Data.Entity.Database.SetInitializer<Automation>(null);
        }

        public Automation()
            : base("Name=DatabaseAutomation")
        {
        }

        public Automation(string connectionString)
            : base(connectionString)
        {
        }

        public Automation(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public Automation(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public Automation(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new TaxJournalConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new TaxJournalConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class AutomationFactory : System.Data.Entity.Infrastructure.IDbContextFactory<Automation>
    {
        public Automation Create()
        {
            return new Automation();
        }
    }

    #endregion

    #region POCO classes

    // TaxJournal
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class TaxJournal
    {
        public int Id { get; set; } // Id (Primary key)
        public int? IdDelo { get; set; } // IdDelo
        public System.DateTime? DateError { get; set; } // DateError
        public string Inn { get; set; } // Inn (length: 12)
        public string Kpp { get; set; } // Kpp (length: 12)
        public string NameFace { get; set; } // NameFace (length: 512)
        public string Fid { get; set; } // Fid (length: 512)
        public bool? IsTks { get; set; } // isTks
        public bool? IsMail { get; set; } // isMail
        public bool? IsLk3 { get; set; } // isLk3
        public System.DateTime? DataCreate { get; set; } // DataCreate

        public TaxJournal()
        {
            DataCreate = System.DateTime.Now;
        }
    }

    #endregion

    #region POCO Configuration

    // TaxJournal
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.1.0")]
    public class TaxJournalConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TaxJournal>
    {
        public TaxJournalConfiguration()
            : this("dbo")
        {
        }

        public TaxJournalConfiguration(string schema)
        {
            ToTable("TaxJournal", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.IdDelo).HasColumnName(@"IdDelo").HasColumnType("int").IsOptional();
            Property(x => x.DateError).HasColumnName(@"DateError").HasColumnType("smalldatetime").IsOptional();
            Property(x => x.Inn).HasColumnName(@"Inn").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(12);
            Property(x => x.Kpp).HasColumnName(@"Kpp").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(12);
            Property(x => x.NameFace).HasColumnName(@"NameFace").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(512);
            Property(x => x.Fid).HasColumnName(@"Fid").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(512);
            Property(x => x.IsTks).HasColumnName(@"isTks").HasColumnType("bit").IsOptional();
            Property(x => x.IsMail).HasColumnName(@"isMail").HasColumnType("bit").IsOptional();
            Property(x => x.IsLk3).HasColumnName(@"isLk3").HasColumnType("bit").IsOptional();
            Property(x => x.DataCreate).HasColumnName(@"DataCreate").HasColumnType("smalldatetime").IsOptional();
        }
    }

    #endregion

}
// </auto-generated>

