{"version":3,"file":"FunctionValidation.js","sourceRoot":"","sources":["FunctionValidation.ts"],"names":[],"mappings":"AAGA,kFAAkF;AAClF,MAAM,UAAU,sBAAsB,CAAC,MAAc;IACjD,OAAO,UAAC,OAAwB;QAC5B,IAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7C,OAAO,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,eAAe,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;IAC5E,CAAC,CAAC;AACN,CAAC;AAED,MAAM,UAAU,aAAa;IACzB,OAAO,UAAC,OAAwB;QAC5B,OAAO,OAAO,CAAC,KAAK,GAAG,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAA;IACxF,CAAC,CAAC;AACN,CAAC","sourcesContent":["import { ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\n\r\n//Сам написал проверка на регулярное выражение аналогичные проверки пишатся так-же\r\nexport function forbiddenNameValidator(nameRe: RegExp): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n        const forbidden = nameRe.test(control.value);\r\n        return forbidden ? null : { 'forbiddenName': { value: control.value } };\r\n    };\r\n}\r\n\r\nexport function validatorDate(): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n        return control.value < new Date() ? null : { 'DateError': { value: control.value } }\r\n    };\r\n}"]}