{"version":3,"file":"MainInventarization.js","sourceRoot":"","sources":["MainInventarization.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAE,QAAQ,EAAiB,MAAM,+BAA+B,CAAA;AACvE,OAAO,EAAE,iBAAiB,EAAE,MAAM,mBAAmB,CAAC;AACtD,OAAO,EAAE,uBAAuB,EAAE,MAAM,wBAAwB,CAAC;AACjE,OAAO,EAAE,kBAAkB,EAAE,MAAM,6CAA6C,CAAC;AASjF;IAMI,sBAAY,QAAkB,EAAS,WAA+B;QAAtE,iBAKC;QALsC,gBAAW,GAAX,WAAW,CAAoB;QALtE,aAAQ,GAAW,IAAI,CAAC;QACxB,UAAK,GAAW,IAAI,CAAC;QACrB,YAAO,GAAU,IAAI,CAAC;QAStB,mBAAc,GAAG,UAAC,CAAS,EAAE,QAAuB,IAAK,OAAA,CAAC,QAAQ,CAAC,KAAK,EAAf,CAAe,CAAC;QACjE,iBAAY,GAAG,UAAC,IAAmB,IAAK,OAAA,IAAI,CAAC,QAAQ,EAAb,CAAa,CAAC;QAN1D,IAAI,CAAC,OAAO,GAAG,oBAAoB,GAAG,WAAW,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC;QACxE,IAAI,CAAC,iBAAiB,GAAG,IAAI,iBAAiB,CAAgB,IAAI,CAAC,YAAY,CAAC,CAAC;QACjF,IAAI,CAAC,gBAAgB,GAAG,IAAI,uBAAuB,EAAE,CAAC;QACtD,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,IAAI,EAAjC,CAAiC,CAAC,CAAC;IAC7E,CAAC;IAID,kCAAW,GAAX,UAAY,IAAmB;QAC3B,IAAI,CAAC,QAAQ,GAAG,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;QAC1C,IAAI,CAAC,KAAK,GAAG,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC;IACjD,CAAC;IAlBQ,YAAY;QAPxB,SAAS,CAAC,CAAC;YACR,QAAQ,EAAE,UAAU;YACpB,WAAW,EAAE,8BAA8B;YAC3C,SAAS,EAAE,CAAC,6BAA6B,CAAC;YAC1C,SAAS,EAAE,CAAC,QAAQ,CAAC;SACxB,CAAQ,CAAC;yCAQgB,QAAQ,EAAsB,kBAAkB;OAN7D,YAAY,CAmBxB;IAAD,mBAAC;CAAA,AAnBD,IAmBC;SAnBY,YAAY","sourcesContent":["import { Component } from '@angular/core';\r\nimport { Inventar, ModelInventar } from '../Model/ModelInventarization'\r\nimport { NestedTreeControl } from '@angular/cdk/tree';\r\nimport { MatTreeNestedDataSource } from '@angular/material/tree';\r\nimport { AuthIdentification } from '../../../PostZaprosFull/PostInventarization';\r\n\r\n@Component(({\r\n    selector: 'app-root',\r\n    templateUrl: '../Html/Inventarization.html',\r\n    styleUrls: ['../Html/Inventarization.css'],\r\n    providers: [Inventar]\r\n}) as any)\r\n\r\nexport class MainInventar {\r\n    fullpath: string = null;\r\n    model: string = null;\r\n    welcome:string = null;\r\n    nestedTreeControl: NestedTreeControl<ModelInventar>;\r\n    nestedDataSource: MatTreeNestedDataSource<ModelInventar>;\r\n    constructor(database: Inventar, public authService: AuthIdentification) {\r\n        this.welcome = 'Добро пожаловать: ' + authService.fullSelect.Users.Name;\r\n        this.nestedTreeControl = new NestedTreeControl<ModelInventar>(this._getChildren);\r\n        this.nestedDataSource = new MatTreeNestedDataSource();\r\n        database.dataChange.subscribe(data => this.nestedDataSource.data = data);\r\n    }\r\n    hasNestedChild = (_: number, nodeData: ModelInventar) => !nodeData.types;\r\n    private _getChildren = (node: ModelInventar) => node.children;\r\n\r\n    selectmodel(node: ModelInventar) {\r\n        this.fullpath = 'Ветка: ' + node.fullpath;\r\n        this.model = 'Предназначение: ' + node.model;\r\n    }\r\n}"]}