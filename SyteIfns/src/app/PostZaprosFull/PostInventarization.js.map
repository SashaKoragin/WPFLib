{"version":3,"file":"PostInventarization.js","sourceRoot":"","sources":["PostInventarization.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAC/D,OAAO,EAAE,KAAK,EAAgB,MAAM,oDAAoD,CAAC;AACzF,OAAO,EAAE,gBAAgB,EAAE,MAAM,oCAAoC,CAAC;AACtE,OAAO,EAAE,aAAa,EAAE,MAAM,6CAA6C,CAAC;AAE5E,IAAM,GAAG,GAAqB,IAAI,gBAAgB,EAAE,CAAC;AACrD,IAAM,eAAe,GAAG;IACpB,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;CAEnE,CAAC;AAIF;IAEI,4BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAGpC,SAAI,GAAS,IAAI,KAAK,EAAE,CAAC;QAGzB,WAAM,GAAU,IAAI,CAAC;QACrB,aAAQ,GAAW,IAAI,CAAC;QAGxB,eAAU,GAAG,KAAK,CAAC;IAVqB,CAAC;IAazC,kCAAK,GAAL;QACI,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC;QACpC,IAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,oBAAoB,EAAE,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;IAChF,CAAC;IAED,mCAAM,GAAN;QACI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACtB,CAAC;IA1BQ,kBAAkB;QAH9B,UAAU,CAAC;YACR,UAAU,EAAE,MAAM;SACrB,CAAC;yCAG4B,UAAU;OAF3B,kBAAkB,CA2B9B;IAAD,yBAAC;CAAA,AA3BD,IA2BC;SA3BY,kBAAkB;AA8B/B;IACI,sBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,wDAAwD;IACxD,8BAAO,GAAP,UAAQ,GAAU;QACd,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE,eAAe,CAAC,CAAC;IAChF,CAAC;IANQ,YAAY;QADxB,UAAU,EAAE;yCAEiB,UAAU;OAD3B,YAAY,CAOxB;IAAD,mBAAC;CAAA,AAPD,IAOC;SAPY,YAAY","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Users, FullSelected } from '../Inventarka/ModelInventarization/Inventarization';\r\nimport { AdressInventarka } from '../AdressFullRest/AdressInventarka';\r\nimport { ModelParametr } from '../Inventarka/ModelInventarization/Parametr';\r\n\r\nconst url: AdressInventarka = new AdressInventarka();\r\nconst httpOptionsJson = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n\r\n};\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthIdentification {\r\n\r\n    constructor(private http: HttpClient) { }\r\n\r\n    fullSelect: FullSelected;\r\n    user:Users = new Users();\r\n    error:string;\r\n\r\n    logins:string = null;\r\n    password: string = null;\r\n\r\n\r\n    isLoggedIn = false;\r\n    redirectUrl: string;\r\n\r\n    login() {\r\n        this.error = null;\r\n        this.user.Passwords = this.password;\r\n        this.user.NameUser = this.logins;\r\n        return this.http.post(url.autificationInventar, this.user, httpOptionsJson);\r\n    }\r\n\r\n    logout(): void {\r\n        this.isLoggedIn = false;\r\n        this.user = new Users();\r\n        this.error = null;\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class PostInventar {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    ///Выборка всего из БД в зависимостb от num пользователи\r\n    alluser(num:number) {\r\n        return this.http.post(url.alluser, new ModelParametr(num), httpOptionsJson);\r\n    }\r\n}\r\n\r\n"]}