{"version":3,"file":"PostFull.js","sourceRoot":"","sources":["PostFull.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,sBAAsB,CAAC;AAC/D,OAAO,EAAE,WAAW,EAAE,MAAM,iCAAiC,CAAC;AAM9D,IAAM,GAAG,GAAgB,IAAI,WAAW,EAAE,CAAC;AAC3C,IAAM,eAAe,GAAG;IACpB,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;CAEnE,CAAC;AAKE;IACA,0BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAGpC,eAAU,GAAG,KAAK,CAAC;IAHqB,CAAC;IAQzC,gCAAK,GAAL,UAAM,OAAoB;QACtB,OAAO,CAAC,SAAS,CAAC,KAAK,GAAG,IAAI,CAAC;QAC/B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IAC3E,CAAC;IAED,iCAAM,GAAN,UAAO,OAAoB;QACvB,IAAI,OAAO,CAAC,SAAS,CAAC,KAAK,KAAK,IAAI,EAAE;YAClC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;SAC1B;aAAM;YACH,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;SAC3B;IACL,CAAC;IAID,iCAAM,GAAN;QACI,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;IAC5B,CAAC;IA1BY,gBAAgB;QAHhC,UAAU,CAAC;YACR,UAAU,EAAE,MAAM;SACrB,CAAC;yCAE4B,UAAU;OADvB,gBAAgB,CA2BhC;IAAD,uBAAC;CAAA,AA3BG,IA2BH;SA3BgB,gBAAgB;AA8BjC;IACI,qBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,iCAAW,GAAX;QACI,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAED,gCAAU,GAAV,UAAW,IAAoB;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IAC5E,CAAC;IAED,kCAAY,GAAZ,UAAa,IAAa;QACtB,IAAI;YACA,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;SACnE;QAAC,OAAO,CAAC,EAAE;YACR,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SACvB;IACL,CAAC;IAjBQ,WAAW;QADvB,UAAU,EAAE;yCAEiB,UAAU;OAD3B,WAAW,CAmBvB;IAAD,kBAAC;CAAA,AAnBD,IAmBC;SAnBY,WAAW;AAwBxB;IACI,wBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,uCAAc,GAAd,UAAe,OAAoB;QAC/B,IAAI;YACA,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;SACrE;QAAC,OAAO,CAAC,EAAE;YACR,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SACvB;IACL,CAAC;IATQ,cAAc;QAD1B,UAAU,EAAE;yCAEiB,UAAU;OAD3B,cAAc,CAU1B;IAAD,qBAAC;CAAA,AAVD,IAUC;SAVY,cAAc;AAa3B;IACI,iBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,0BAAQ,GAAR,UAAS,OAAoB;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IACrE,CAAC;IAED,mCAAiB,GAAjB,UAAkB,OAAoB;QAC9B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IAC1E,CAAC;IACD,4BAAU,GAAV,UAAW,OAAoB;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IACpE,CAAC;IACD,4BAAU,GAAV,UAAW,OAAoB;QAC3B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IACpE,CAAC;IAfQ,OAAO;QADnB,UAAU,EAAE;yCAEiB,UAAU;OAD3B,OAAO,CAgBnB;IAAD,cAAC;CAAA,AAhBD,IAgBC;SAhBY,OAAO;AAmBpB;IACI,oBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAK,CAAC;IAE1C,6BAAQ,GAAR,UAAS,OAAoB;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,iBAAiB,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IAC3E,CAAC;IALQ,UAAU;QADtB,UAAU,EAAE;yCAEiB,UAAU;OAD3B,UAAU,CAMtB;IAAD,iBAAC;CAAA,AAND,IAMC;SANY,UAAU;AASvB;IACI,sBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,qCAAc,GAAd,UAAe,OAAoB;QAC/B,IAAI;YACA,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,sBAAsB,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;SAC/E;QAAC,OAAO,CAAC,EAAE;YACR,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SACvB;IACL,CAAC;IATQ,YAAY;QADxB,UAAU,EAAE;yCAEiB,UAAU;OAD3B,YAAY,CAUxB;IAAD,mBAAC;CAAA,AAVD,IAUC;SAVY,YAAY;AAczB;IACI,sBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEzC,mCAAY,GAAZ,UAAa,OAAoB;QAC7B,IAAI;YACA,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;SACvE;QAAC,OAAO,CAAC,EAAE;YACR,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SACvB;IACL,CAAC;IAED,wCAAiB,GAAjB,UAAkB,OAAqB;QACnC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IACpE,CAAC;IAED,mCAAY,GAAZ,UAAa,OAA+B;QACxC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kBAAkB,EAAE,OAAO,EACjD,EAAE,YAAY,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,EAAE,CAAC,CAAC;IAC3G,CAAC;IAlBQ,YAAY;QADxB,UAAU,EAAE;yCAEiB,UAAU;OAD3B,YAAY,CAmBxB;IAAD,mBAAC;CAAA,AAnBD,IAmBC;SAnBY,YAAY;AAsBzB;IACI,qBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAEnC,iCAAW,GAAlB,UAAmB,QAAyB;QACvC,IAAI;YACA,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC;SACrE;QAAC,OAAO,CAAC,EAAE;YACR,KAAK,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;SACvB;IACL,CAAC;IATQ,WAAW;QADvB,UAAU,EAAE;yCAEiB,UAAU;OAD3B,WAAW,CAUvB;IAAD,kBAAC;CAAA,AAVD,IAUC;SAVY,WAAW;AAaxB;IACI,2BAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IACnC,wCAAY,GAAnB,UAAoB,MAAa;QAC5B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,YAAY,EAAE,aAAa,EAAE,CAAC,CAAC;IAClE,CAAC;IAJQ,iBAAiB;QAD7B,UAAU,EAAE;yCAEiB,UAAU;OAD3B,iBAAiB,CAK7B;IAAD,wBAAC;CAAA,AALD,IAKC;SALY,iBAAiB;AAQ9B;IACI,oBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAElC,+BAAU,GAAjB,UAAkB,OAAoB;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAChC,OAAO,EACP,EAAE,YAAY,EAAE,aAAa,EAAE,OAAO,EAAE,IAAI,WAAW,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,EAAE,CAAC,CAAC;IAC3G,CAAC;IAPQ,UAAU;QADtB,UAAU,EAAE;yCAEiB,UAAU;OAD3B,UAAU,CAQtB;IAAD,iBAAC;CAAA,AARD,IAQC;SARY,UAAU;AAWvB;IACI,uBAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IAAI,CAAC;IAClC,iCAAS,GAAhB,UAAiB,OAAoB;QACjC,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,EAAE,eAAe,CAAC,CAAC;IACxE,CAAC;IAJQ,aAAa;QADzB,UAAU,EAAE;yCAEiB,UAAU;OAD3B,aAAa,CAMzB;IAAD,oBAAC;CAAA,AAND,IAMC;SANY,aAAa","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { AdressMerge } from '../AdressFullRest/AdresSservice';\r\nimport { FaceErrorField, FaceAdd } from '../Otdel/Analiticks/FaceMerge/Model/FaceError';\r\nimport { FullSetting } from '../FullSetting/FullSetting';\r\nimport { AngularModel, AngularModelFileDonload } from '../ModelService/ModelService';\r\nimport { AngularTemplate } from '../Otdel/It/AddTemplate/Model/ModelTemplate'\r\n\r\nconst url: AdressMerge = new AdressMerge();\r\nconst httpOptionsJson = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\n    export class AuthServiceDomen {\r\n    constructor(private http: HttpClient) { }\r\n\r\n\r\n    isLoggedIn = false;\r\n\r\n    // store the URL so we can redirect after logging in\r\n    redirectUrl: string;\r\n\r\n    login(setting: FullSetting) {\r\n        setting.ModelUser.Error = null;\r\n        return this.http.post(url.authservicedomain, setting, httpOptionsJson);\r\n    }\r\n\r\n    result(setting: FullSetting) {\r\n        if (setting.ModelUser.Error === null) {\r\n            this.isLoggedIn = true;\r\n        } else {\r\n            this.isLoggedIn = false;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    logout(): void {\r\n        this.isLoggedIn = false;\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class DataService {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    getfacepost() {\r\n        return this.http.post(url.addresError, null);\r\n    }\r\n\r\n    deleteface(face: FaceErrorField) {\r\n        return this.http.post(url.addresDelFace, face.idField, httpOptionsJson);\r\n    }\r\n\r\n    addfacemerge(face: FaceAdd) {\r\n        try {\r\n            return this.http.post(url.addresFaceAdd, face, httpOptionsJson);\r\n        } catch (e) {\r\n            alert(e.toString());\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n@Injectable()\r\nexport class PostTrebovanie {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    procedurestart(setting: FullSetting) {\r\n        try {\r\n            return this.http.post(url.useprocedure, setting, httpOptionsJson);\r\n        } catch (e) {\r\n            alert(e.toString());\r\n        }\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class PostBdk {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    modelbdk(setting: FullSetting) {\r\n            return this.http.post(url.loadbdk, setting, httpOptionsJson);\r\n    }\r\n\r\n    startprocedurebdk(setting: FullSetting) {\r\n            return this.http.post(url.procedurebdk, setting, httpOptionsJson);\r\n    }\r\n    createkrsb(setting: FullSetting) {\r\n        return this.http.post(url.createkrsb, setting, httpOptionsJson);\r\n    }\r\n    analizkrsb(setting: FullSetting) {\r\n        return this.http.post(url.analizkrsb, setting, httpOptionsJson);\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class LetterForm {\r\n    constructor(private http: HttpClient ) { }\r\n\r\n    modelbdk(setting: FullSetting) {\r\n        return this.http.post(url.startoutbdkletter, setting, httpOptionsJson);\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class PostSoprovod {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    procedurestart(setting: FullSetting) {\r\n        try {\r\n            return this.http.post(url.startproceduresoprovod, setting, httpOptionsJson);\r\n        } catch (e) {\r\n            alert(e.toString());\r\n        }\r\n    }\r\n}\r\n\r\n\r\n@Injectable()\r\nexport class ServiceModel {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    modelservice(setting: FullSetting) {\r\n        try {\r\n            return this.http.post(url.servicecommand, setting, httpOptionsJson);\r\n        } catch (e) {\r\n            alert(e.toString());\r\n        }\r\n    }\r\n\r\n    datacommandserver(angular: AngularModel) {\r\n        return this.http.post(url.sqlcommand, angular, httpOptionsJson);\r\n    }\r\n\r\n    downloadFile(angular:AngularModelFileDonload) {\r\n        return this.http.post(url.donloadfileangular, angular,\r\n            { responseType: 'arraybuffer', headers: new HttpHeaders({ 'Content-Type': 'application/json' }) });\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class TemplateAdd {\r\n    constructor(private http: HttpClient) { }\r\n\r\n   public addtemplate(template: AngularTemplate) {\r\n        try {\r\n            return this.http.post(url.addtemplate, template, httpOptionsJson);\r\n        } catch (e) {\r\n            alert(e.toString());\r\n        }\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class DonloadFileReport {\r\n    constructor(private http: HttpClient) { }\r\n   public downloadFile(geturl:string) {\r\n        return this.http.get(geturl, { responseType: 'arraybuffer' });\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class Kam5Report {\r\n    constructor(private http: HttpClient) { }\r\n\r\n    public reportFile(setting: FullSetting) {\r\n        return this.http.post(url.reportKam5,\r\n            setting,\r\n            { responseType: 'arraybuffer', headers: new HttpHeaders({ 'Content-Type': 'application/json' }) });\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class ServersSqlAll {\r\n    constructor(private http: HttpClient) { }\r\n    public sqlServer(setting: FullSetting) {\r\n        return this.http.post(url.serversFullSql, setting, httpOptionsJson);\r\n    }\r\n\r\n}"]}