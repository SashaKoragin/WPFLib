{"version":3,"file":"AuthInventarization.js","sourceRoot":"","sources":["AuthInventarization.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EACU,MAAM,EAKtB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,kBAAkB,EAAE,MAAO,0CAA0C,CAAC;AAI/E;IACI,sBAAoB,WAA+B,EAAU,MAAc;QAAvD,gBAAW,GAAX,WAAW,CAAoB;QAAU,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IAEhF,kCAAW,GAAX,UAAY,KAA6B,EAAE,KAA0B;QACjE,IAAI,GAAG,GAAW,KAAK,CAAC,GAAG,CAAC;QAC5B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IAED,uCAAgB,GAAhB,UAAiB,KAA6B,EAAE,KAA0B;QACtE,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;IAC1C,CAAC;IAED,8BAAO,GAAP,UAAQ,KAAY;QAChB,IAAI,GAAG,GAAG,MAAI,KAAK,CAAC,IAAM,CAAC;QAC3B,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IAED,iCAAU,GAAV,UAAW,GAAW;QAClB,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE;YAAE,OAAO,IAAI,CAAC;SAAE;QACjD,IAAI,CAAC,WAAW,CAAC,WAAW,GAAG,GAAG,CAAC;QACnC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACzC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC7B,OAAO,KAAK,CAAC;IACjB,CAAC;IAvBQ,YAAY;QAHxB,UAAU,CAAC;YACR,UAAU,EAAE,MAAM;SACrB,CAAC;yCAEmC,kBAAkB,EAAkB,MAAM;OADlE,YAAY,CAwBxB;IAAD,mBAAC;CAAA,AAxBD,IAwBC;SAxBY,YAAY","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {\r\n    CanActivate, Router,\r\n    ActivatedRouteSnapshot,\r\n    RouterStateSnapshot,\r\n    CanActivateChild,\r\n    CanLoad, Route\r\n} from '@angular/router';\r\nimport { AuthIdentification } from  '../../PostZaprosFull/PostInventarization';\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class AuthInventar implements CanActivate, CanActivateChild, CanLoad {\r\n    constructor(private authService: AuthIdentification, private router: Router) { }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n        let url: string = state.url;\r\n        return this.checkLogin(url);\r\n    }\r\n\r\n    canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n        return this.canActivate(route, state);\r\n    }\r\n\r\n    canLoad(route: Route): boolean {\r\n        let url = `/${route.path}`;\r\n        return this.checkLogin(url);\r\n    }\r\n\r\n    checkLogin(url: string): boolean {\r\n        if (this.authService.isLoggedIn) { return true; }\r\n        this.authService.redirectUrl = url;\r\n        this.router.navigate(['/inventarlogin']);\r\n        console.log(this.router.url);\r\n        return false;\r\n    }\r\n}"]}